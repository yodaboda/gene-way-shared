/*******************************************************************************
 * Copyright 2019 Firas Swidan, PhD. frsswdn@gmail.com. firas.swidna@icloud.com.
 * https://www.linkedin.com/in/swidan
 * POBox 8125, Nazareth 16480, Israel.
 * Public key: AAAAB3NzaC1yc2EAAAADAQABAAACAQD6Lt98LolwuA/aOcK0h91ECdeiyG3QKcUOT/CcMEPV64cpkv3jrLLGoag7YtzESZ3j7TLEd0WHZ/BZ9d+K2kRfzuuCdMMhrBwqP3YObbTbSIM6NjUNwbH403LLb3FuYApUt1EvC//w64UMm7h3fTo0vdyVuMuGnkRZuM6RRAXcODM4tni9ydd3ZQKN4inztkeH/sOoM77FStk8E2VYbljUQdY39zlRoZwUqNdKzwD3T2G00tmROlTZ6K5L8i68Zqt6s0XNS6XQvS3zXe0fI6UwuetnDrcVr1Yb8y2T8lfjMG9+9L2aKPoUOlOMMcyqM+oKVvRUOSdrzmtKOljnYC7TqzvsKrfXHvHlqHxxhPp1K7B/YWrHwCDbqp02dXdIaXkkHCIqKFNaY06HEWt4obDxppVhC8IabSb55LQVCCT7J4TFbwp6rID2+Y1L7NEvR3v3oaWSlQIZ+WSG04mwh9/7gRCt7XUoqmEXCCPoHqZXq5sWv193XA57pD5gKoX7Rf2i6UdbduNTMIhQMqcWIaPMBFwxUv/LRQCHnS+mlW2GnIHIHHGS/S46MurZ6BMvcb7fEz/NorVxvh3DbUaVTteMYcikH0y5sPmGECB1d99ENBBSEX6diI+PneFp2sOouQ6gOBWy6WAt3spGfLTOFMPo3bMV/UpktkQPpXkmfd1esQ==
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	
    repositories {
		mavenLocal()
        mavenCentral()   
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }	
        flatDir {
        	dirs System.properties['user.home'] + '/Documents/gene-way-workspace/gene-way-app/extraDependencies/langdetect/lib'
       	}
    }


	eclipse {
		classpath {
		    downloadJavadoc = true
        	downloadSources = true
		}
	}
    
}

buildscript{
	repositories{
		mavenLocal()
        mavenCentral()   
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }	
        flatDir {
        	dirs System.properties['user.home'] + '/Documents/gene-way-workspace/gene-way-app/extraDependencies/langdetect/lib'
       	}	
	}
	dependencies {
    	classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    	classpath "com.diffplug.spotless:spotless-plugin-gradle:3.16.0"
    	classpath 'com.netflix.nebula:gradle-lint-plugin:10.4.0'
    	classpath 'com.google.googlejavaformat:google-java-format:1.6'
  	}
	tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1 
    }
}

project.ext.version = 1

apply plugin: org.sonarqube.gradle.SonarQubePlugin
apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin
spotless {
  java {
//  	googleJavaFormat('1.6')
  	importOrder 'java', 'javax', 'org', 'com'
  	removeUnusedImports()
//	paddedCell()  //causes spotless check to stop working...
  //  licenseHeader '/* Licensed under Apache-2.0 */'	// License header
  //  licenseHeaderFile 'spotless.license.java'		// License header file
    // Obviously, you can't specify both licenseHeader and licenseHeaderFile at the same time

 //   importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''	// A sequence of package names
  //  importOrderFile 'spotless.importorder'				// An import ordering file, exported from Eclipse
    // As before, you can't specify both importOrder and importOrderFile at the same time
    // You probably want an empty string at the end - all of the imports you didn't specify
    // explicitly will go there.

//    removeUnusedImports() // removes any unused imports

 //   eclipse().configFile 'spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
    // If you have Eclipse preference or property files, you can use them too.
    // eclipse('4.7.1') to specify a specific version of eclipse,
    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/config/eclipse_jdt_formatter
  }
}

apply plugin: com.netflix.nebula.lint.plugin.GradleLintPlugin
gradleLint {
		//Consider adding 'unused-dependency' once it starts supporting 'deprecated-dependency-configuration'
      rules = ['deprecated-dependency-configuration', 'dependency-parentheses','dependency-tuple'] 
      criticalRules = []
}

//jacocoTestReport {
//    reports {
//        xml.enabled false
//        csv.enabled false
//        html.destination file("${buildDir}/jacocoHtml")
//    }
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fastTest(type: Test){
    useJUnit {
        includeCategories 'com.nutrinfomics.geneway.shared.testcategory.FastTest'
        excludeCategories 'com.nutrinfomics.geneway.shared.testcategory.SlowTest'
    }
}
task slowTest(type: Test) {
    useJUnit {
        excludeCategories 'com.nutrinfomics.geneway.shared.testcategory.FastTest'
        includeCategories 'com.nutrinfomics.geneway.shared.testcategory.SlowTest'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    	if (project.hasProperty('debugDeps')) {
      		failOnVersionConflict()
    	}
    	    // prefer modules that are part of this build (multi-project or composite build) over external modules
 //   preferProjectModules()

    // force certain versions of dependencies (including transitive)
    //  *append new forced modules:
   // force 'asm:asm-all:3.3.1', 'commons-io:commons-io:1.4'
    //  *replace existing forced modules with new ones:
    //forcedModules = ['asm:asm-all:3.3.1']

    // add dependency substitution rules
    //dependencySubstitution {
    //  substitute module('org.gradle:api') with project(':api')
    //  substitute project(':util') with module('org.gradle:util:3.0')
    //}

    // cache dynamic versions for 10 minutes
//    cacheDynamicVersionsFor 10*60, 'seconds'
    // don't cache changing modules at all
//    cacheChangingModulesFor 0, 'seconds'
    }
}